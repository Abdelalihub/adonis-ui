<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:AdonisUI.Controls"
                    xmlns:extensions="clr-namespace:AdonisUI.Extensions"
                    xmlns:adonisUi="clr-namespace:AdonisUI"
                    xmlns:converters="clr-namespace:AdonisUI.Converters"
                    xmlns:drawing="clr-namespace:System.Drawing;assembly=System.Drawing">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/AdonisUI;component/Controls/AdonisWindow.xaml"/>
    </ResourceDictionary.MergedDictionaries>


    <Style TargetType="{x:Type local:MessageBox}"
           BasedOn="{StaticResource {x:Type local:AdonisWindow}}">
        <Setter Property="Title" Value="{Binding Caption}"/>
        <Setter Property="DialogButtonsBackground" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1BackgroundBrush}}"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="WindowStyle" Value="ToolWindow"/>
        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        <Setter Property="ShowInTaskbar" Value="False"/>
        <Setter Property="MaxWidth" Value="470"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="60"/>
        <Setter Property="IconVisibility" Value="Collapsed"/>
        <Setter Property="Content" Value="{Binding}"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="18"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="18"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- Content -->
                        <Grid Grid.Row="1"
                              Margin="12">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <!-- Icon -->
                            <Image x:Name="Icon"
                                   Margin="0, 0, 12, 0"
                                   Stretch="Uniform"
                                   MaxHeight="32"
                                   VerticalAlignment="Top"
                                   HorizontalAlignment="Left"/>

                            <!-- Text -->
                            <TextBlock Grid.Column="1"
                                       Text="{Binding Text}"
                                       TextWrapping="Wrap"/>
                        </Grid>

                        <!-- Buttons -->
                        <!-- TODO: localization of buttons -->
                        <!-- TODO: Binding to Button.IsDefault depending on DataContext.DefaultResult -->
                        <Border Grid.Row="3"
                                Background="{Binding DialogButtonsBackground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MessageBox}}}"
                                extensions:LayerExtension.IncreaseLayer="True">

                            <UniformGrid Rows="1"
                                         HorizontalAlignment="Right"
                                         Margin="30, 12, 6, 12">

                                <!-- OK -->
                                <Button x:Name="PART_OkButton"
                                        Content="{Binding Path=CustomButtonLabels[(local:MessageBoxButton)OK]}"
                                        IsDefault="{Binding IsValid}"
                                        MinWidth="78"
                                        Margin="0, 0, 12, 0"
                                        Padding="{adonisUi:Space 2, 0.5}"
                                        Visibility="Collapsed"/>

                                <!-- Yes -->
                                <Button x:Name="PART_YesButton" 
                                        Content="{Binding Path=CustomButtonLabels[(local:MessageBoxButton)Yes]}"
                                        IsDefault="{Binding IsValid}"
                                        MinWidth="78"
                                        Margin="0, 0, 12, 0"
                                        Padding="{adonisUi:Space 2, 0.5}"
                                        Visibility="Collapsed"/>

                                <!-- No -->
                                <Button x:Name="PART_NoButton"
                                        Content="{Binding Path=CustomButtonLabels[(local:MessageBoxButton)No]}"
                                        IsCancel="True"
                                        MinWidth="78"
                                        Margin="0, 0, 12, 0"
                                        Padding="{adonisUi:Space 2, 0.5}"
                                        Visibility="Collapsed"/>

                                <!-- Cancel -->
                                <Button x:Name="PART_CancelButton"
                                        Content="{Binding Path=CustomButtonLabels[(local:MessageBoxButton)Cancel]}"
                                        IsCancel="True"
                                        MinWidth="78"
                                        Margin="0, 0, 12, 0"
                                        Padding="{adonisUi:Space 2, 0.5}"
                                        Visibility="Collapsed"/>

                            </UniformGrid>

                        </Border>
                    </Grid>

                    <DataTemplate.Triggers>

                        <!--#region Button Visibility Triggers-->

                        <DataTrigger Binding="{Binding Buttons}" Value="{x:Static local:MessageBoxButtons.OK}">
                            <Setter Property="Visibility" TargetName="PART_OkButton" Value="Visible"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Buttons}" Value="{x:Static local:MessageBoxButtons.OKCancel}">
                            <Setter Property="Visibility" TargetName="PART_OkButton" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="PART_CancelButton" Value="Visible"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Buttons}" Value="{x:Static local:MessageBoxButtons.YesNo}">
                            <Setter Property="Visibility" TargetName="PART_YesButton" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="PART_NoButton" Value="Visible"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Buttons}" Value="{x:Static local:MessageBoxButtons.YesNoCancel}">
                            <Setter Property="Visibility" TargetName="PART_YesButton" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="PART_NoButton" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="PART_CancelButton" Value="Visible"/>
                        </DataTrigger>

                        <!--#endregion-->

                        <!--#region Custom Button Label Triggers-->

                        <DataTrigger Binding="{Binding Path=CustomButtonLabels[(local:MessageBoxButton)OK], FallbackValue={x:Null}}"
                                     Value="{x:Null}">
                            <Setter Property="Content" TargetName="PART_OkButton" Value="OK"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=CustomButtonLabels[(local:MessageBoxButton)Yes], FallbackValue={x:Null}}"
                                     Value="{x:Null}">
                            <Setter Property="Content" TargetName="PART_YesButton" Value="Yes"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=CustomButtonLabels[(local:MessageBoxButton)No], FallbackValue={x:Null}}"
                                     Value="{x:Null}">
                            <Setter Property="Content" TargetName="PART_NoButton" Value="No"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=CustomButtonLabels[(local:MessageBoxButton)Cancel], FallbackValue={x:Null}}"
                                     Value="{x:Null}">
                            <Setter Property="Content" TargetName="PART_CancelButton" Value="Cancel"/>
                        </DataTrigger>

                        <!--#endregion-->

                        <!--#region Icon Source Triggers-->

                        <DataTrigger Binding="{Binding Icon}" Value="{x:Static local:MessageBoxImage.None}">
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Icon}" Value="{x:Static local:MessageBoxImage.Asterisk}">
                            <Setter Property="Source" TargetName="Icon" Value="{Binding Source={x:Static drawing:SystemIcons.Asterisk}, Converter={x:Static converters:IconToBitmapSourceConverter.Instance}}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Icon}" Value="{x:Static local:MessageBoxImage.Error}">
                            <Setter Property="Source" TargetName="Icon" Value="{Binding Source={x:Static drawing:SystemIcons.Error}, Converter={x:Static converters:IconToBitmapSourceConverter.Instance}}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Icon}" Value="{x:Static local:MessageBoxImage.Exclamation}">
                            <Setter Property="Source" TargetName="Icon" Value="{Binding Source={x:Static drawing:SystemIcons.Exclamation}, Converter={x:Static converters:IconToBitmapSourceConverter.Instance}}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Icon}" Value="{x:Static local:MessageBoxImage.Hand}">
                            <Setter Property="Source" TargetName="Icon" Value="{Binding Source={x:Static drawing:SystemIcons.Hand}, Converter={x:Static converters:IconToBitmapSourceConverter.Instance}}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Icon}" Value="{x:Static local:MessageBoxImage.Information}">
                            <Setter Property="Source" TargetName="Icon" Value="{Binding Source={x:Static drawing:SystemIcons.Information}, Converter={x:Static converters:IconToBitmapSourceConverter.Instance}}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Icon}" Value="{x:Static local:MessageBoxImage.Question}">
                            <Setter Property="Source" TargetName="Icon" Value="{Binding Source={x:Static drawing:SystemIcons.Question}, Converter={x:Static converters:IconToBitmapSourceConverter.Instance}}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Icon}" Value="{x:Static local:MessageBoxImage.Stop}">
                            <Setter Property="Source" TargetName="Icon" Value="{Binding Source={x:Static drawing:SystemIcons.Hand}, Converter={x:Static converters:IconToBitmapSourceConverter.Instance}}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Icon}" Value="{x:Static local:MessageBoxImage.Warning}">
                            <Setter Property="Source" TargetName="Icon" Value="{Binding Source={x:Static drawing:SystemIcons.Warning}, Converter={x:Static converters:IconToBitmapSourceConverter.Instance}}"/>
                        </DataTrigger>

                        <!--#endregion-->

                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>