<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:s="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:AdonisUI.Demo.Views"
                    xmlns:viewModels="clr-namespace:AdonisUI.Demo.ViewModels"
                    xmlns:converters="clr-namespace:AdonisUI.Converters;assembly=AdonisUI"
                    xmlns:adonisUi="clr-namespace:AdonisUI;assembly=AdonisUI"
                    xmlns:adonisExtensions="clr-namespace:AdonisUI.Extensions;assembly=AdonisUI"
                    xmlns:adonisControls="clr-namespace:AdonisUI.Controls;assembly=AdonisUI">

    <DataTemplate DataType="{x:Type viewModels:CollectionDemoViewModel}">
        <Grid>
            <Grid.Resources>
                <s:Boolean x:Key="True">True</s:Boolean>
                <s:Boolean x:Key="False">False</s:Boolean>

                <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}"
                       TargetType="{x:Type Button}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Grid>
                                    <Rectangle Fill="Red"/>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type Thumb}">
                    <Setter Property="Height" Value="16" />
                    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType=DataGridRowHeader}}" />
                    <Setter Property="Cursor" Value="SizeNS" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Thumb}">
                                <Border Padding="{TemplateBinding Padding}"
                                        Background="Transparent">
                                    <Rectangle HorizontalAlignment="Center"
                                               Width="1"
                                               Fill="{TemplateBinding Background}"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
                    <Setter Property="Width" Value="16" />
                    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType=DataGridColumnHeader}}" />
                    <Setter Property="Cursor" Value="SizeWE" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Thumb}">
                                <Border Padding="{TemplateBinding Padding}"
                                        Background="Transparent">
                                    <Rectangle HorizontalAlignment="Center"
                                               Width="1"
                                               Fill="{TemplateBinding Background}"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <Style TargetType="{x:Type DataGridCell}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type DataGridCell}">
                                <Border x:Name="border"
                                        Background="Transparent"
                                        BorderBrush="Transparent"
                                        BorderThickness="{DynamicResource {x:Static adonisUi:Dimensions.BorderThickness}}"
                                        SnapsToDevicePixels="True">
                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <Style TargetType="{x:Type DataGridRowHeader}">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="{DynamicResource {x:Static adonisUi:Dimensions.BorderThickness}}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                                <Grid>
                                    <!-- NOTE; The Width value is fixed because this is applied to 'each' row!
                                         TODO; Find out how to correctly grow the 'entire' column depending on error validation, eg the column is small
                                                by default but expands due to error icon on of the rows.
                                    -->
                                    <Border Width="16">
                                        <StackPanel Orientation="Horizontal">
                                            <ContentPresenter VerticalAlignment="Center"                                
                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            <Control SnapsToDevicePixels="false"
                                                     MaxWidth="16"
                                                     VerticalAlignment="Top"
                                                     Template="{Binding ValidationErrorTemplate, 
                                                                    RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"
                                                     Visibility="{Binding (Validation.HasError), 
                                                                    Converter={x:Static converters:EqualitityToVisibilityConverter.Instance},
                                                                    ConverterParameter={StaticResource True},
                                                                    RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" />
                                        </StackPanel>
                                    </Border>
                                    <!-- TODO Correctly define horizontal grippers -->
                                    <!--<Thumb x:Name="PART_TopHeaderGripper"
                                           Style="{StaticResource RowHeaderGripperStyle}"
                                           VerticalAlignment="Top" />
                                    <Thumb x:Name="PART_BottomHeaderGripper"
                                           Style="{StaticResource RowHeaderGripperStyle}"
                                           VerticalAlignment="Bottom" />-->
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <Style TargetType="{x:Type DataGridRow}">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="{DynamicResource {x:Static adonisUi:Dimensions.BorderThickness}}"/>
                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                    <Setter Property="UseLayoutRounding" Value="True"/>
                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="adonisExtensions:CornerRadiusExtension.CornerRadius" Value="{DynamicResource {x:Static adonisUi:Dimensions.CornerRadius}}"/>
                    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                    <Setter Property="ValidationErrorTemplate">
                        <Setter.Value>
                            <ControlTemplate>
                                <ContentControl ContentTemplate="{DynamicResource {x:Static adonisUi:Icons.Error}}"
                                                VerticalAlignment="Center"
                                                Background="{DynamicResource {x:Static adonisUi:Brushes.ErrorBrush}}"
                                                Foreground="{DynamicResource {x:Static adonisUi:Brushes.AccentForegroundBrush}}"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type DataGridRow}">
                                <Grid>
                                    <Border x:Name="DGR_Border"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="{TemplateBinding adonisExtensions:CornerRadiusExtension.CornerRadius}"/>

                                    <Border x:Name="SpotlightLayer"
                                            Background="{TemplateBinding adonisExtensions:CursorSpotlightExtension.BackgroundBrush}"
                                            BorderBrush="{TemplateBinding adonisExtensions:CursorSpotlightExtension.BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="{TemplateBinding adonisExtensions:CornerRadiusExtension.CornerRadius}"
                                            adonisExtensions:CursorSpotlightExtension.MouseEventSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=DataGridRow}}"
                                            SnapsToDevicePixels="False"/>

                                    <SelectiveScrollingGrid>
                                        <SelectiveScrollingGrid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                        </SelectiveScrollingGrid.ColumnDefinitions>

                                        <SelectiveScrollingGrid.RowDefinitions>
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </SelectiveScrollingGrid.RowDefinitions>

                                        <DataGridCellsPresenter Grid.Column="1"
                                                                ItemsPanel="{TemplateBinding ItemsPanel}"
                                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                        <!-- TODO; Figure out how to freeze the GridRowDetails in horizontal scroll -->
                                        <DataGridDetailsPresenter Grid.Column="1"
                                                                  Grid.Row="1"
                                                                  Visibility="{TemplateBinding DetailsVisibility}"
                                                                  SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, 
                                            ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical},
                                            Converter={x:Static DataGrid.RowDetailsScrollingConverter}, 
                                            RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>

                                        <DataGridRowHeader Grid.RowSpan="2"
                                                           Grid.Column="0"
                                                           SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                                           Visibility="{Binding HeadersVisibility, 
                                                                        ConverterParameter={x:Static DataGridHeadersVisibility.Row}, 
                                                                        Converter={x:Static DataGrid.HeadersVisibilityConverter}, 
                                                                        RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                    </SelectiveScrollingGrid>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>

                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1HighlightBrush}}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1HighlightBorderBrush}}"/>
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1IntenseHighlightBrush}}"/>
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1IntenseHighlightBorderBrush}}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="2"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2HighlightBrush}}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2HighlightBorderBrush}}"/>
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2IntenseHighlightBrush}}"/>
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2IntenseHighlightBorderBrush}}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="3"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3HighlightBrush}}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3HighlightBorderBrush}}"/>
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3IntenseHighlightBrush}}"/>
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3IntenseHighlightBorderBrush}}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="4"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4HighlightBrush}}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4HighlightBorderBrush}}"/>
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4IntenseHighlightBrush}}"/>
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4IntenseHighlightBorderBrush}}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentForegroundBrush}}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.DisabledForegroundBrush}}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.DisabledAccentForegroundBrush}}"/>
                        </MultiTrigger>
                    </Style.Triggers>
                </Style>

                <Style TargetType="{x:Type DataGridColumnHeadersPresenter}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                                <Grid>
                                    <DataGridColumnHeader x:Name="PART_FillerColumnHeader" IsHitTestVisible="False" />
                                    <ItemsPresenter />
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <Style TargetType="{x:Type DataGridColumnHeader}">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
                    <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1BackgroundBrush}}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1BorderBrush}}"/>
                    <Setter Property="BorderThickness" Value="{DynamicResource {x:Static adonisUi:Dimensions.BorderThickness}}"/>
                    <Setter Property="adonisExtensions:CornerRadiusExtension.CornerRadius" Value="{DynamicResource {x:Static adonisUi:Dimensions.CornerRadius}}"/>
                    <Setter Property="Padding" Value="4, 2"/>
                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                                <Grid>
                                    <Border x:Name="columnHeaderBorder" 
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="{TemplateBinding adonisExtensions:CornerRadiusExtension.CornerRadius}"/>

                                    <Border x:Name="SpotlightLayer"
                                            Background="{TemplateBinding adonisExtensions:CursorSpotlightExtension.BackgroundBrush}"
                                            BorderBrush="{TemplateBinding adonisExtensions:CursorSpotlightExtension.BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="{TemplateBinding adonisExtensions:CornerRadiusExtension.CornerRadius}"
                                            adonisExtensions:CursorSpotlightExtension.MouseEventSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=DataGridColumnHeader}}"/>

                                    <ContentPresenter Name="HeaderContent"
                                                      Margin="{TemplateBinding Padding}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      RecognizesAccessKey="True"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />


                                    <!-- TODO; Grippers don't look exactly right in comparison to ListView -->
                                    <!--<Thumb x:Name="PART_LeftHeaderGripper"
                                           HorizontalAlignment="Left"
                                           Style="{StaticResource ColumnHeaderGripperStyle}" />-->
                                    <Thumb x:Name="PART_RightHeaderGripper"
                                           Margin="0,0,-8,0"
                                           HorizontalAlignment="Right"
                                           Style="{StaticResource ColumnHeaderGripperStyle}" />
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>

                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="2">
                            <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BackgroundBrush}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BorderBrush}}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="3">
                            <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BorderBrush}}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="4">
                            <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4BackgroundBrush}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4BorderBrush}}"/>
                        </DataTrigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1HighlightBrush}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1HighlightBorderBrush}}"/>
                            <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1IntenseHighlightBrush}}"/>
                            <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1IntenseHighlightBorderBrush}}"/>
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="2"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2HighlightBrush}}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2HighlightBorderBrush}}"/>
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2IntenseHighlightBrush}}"/>
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2IntenseHighlightBorderBrush}}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="3"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3HighlightBrush}}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3HighlightBorderBrush}}"/>
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3IntenseHighlightBrush}}"/>
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3IntenseHighlightBorderBrush}}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="4"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4HighlightBrush}}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4HighlightBorderBrush}}"/>
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4IntenseHighlightBrush}}"/>
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4IntenseHighlightBorderBrush}}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.DisabledForegroundBrush}}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>

                <Style x:Key="DataGridScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
                    <Setter Property="Padding" Value="0"/>
                    <Setter Property="CanContentScroll" Value="True"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                <Grid Background="{TemplateBinding Background}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>

                                    <Button Grid.Column="0"
                                            Grid.Row="0" 
                                            Focusable="False"
                                            Command="{x:Static DataGrid.SelectAllCommand}"
                                            Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}"
                                            Visibility="{Binding HeadersVisibility, 
                                                            ConverterParameter={x:Static DataGridHeadersVisibility.All}, 
                                                            Converter={x:Static DataGrid.HeadersVisibilityConverter}, 
                                                            RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                            Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />

                                    <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter"
                                                                    Grid.Row="0"
                                                                    Grid.Column="1"
                                                                    Visibility="{Binding HeadersVisibility, 
                                                                                    ConverterParameter={x:Static DataGridHeadersVisibility.Column}, 
                                                                                    Converter={x:Static DataGrid.HeadersVisibilityConverter}, 
                                                                                    RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />

                                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                            Grid.ColumnSpan="2"
                                                            Grid.Row="1"
                                                            CanContentScroll="{TemplateBinding CanContentScroll}" />

                                    <ScrollBar x:Name="PART_VerticalScrollBar"
                                                Grid.Column="2"
                                                Grid.RowSpan="2"
                                                Orientation="Vertical"
                                                ViewportSize="{TemplateBinding ViewportHeight}"
                                                Maximum="{TemplateBinding ScrollableHeight}"
                                                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                                Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>

                                    <Grid Grid.Column="1" Grid.Row="2">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>

                                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                                    Grid.Column="1"
                                                    Orientation="Horizontal"
                                                    ViewportSize="{TemplateBinding ViewportWidth}"
                                                    Maximum="{TemplateBinding ScrollableWidth}"
                                                    Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                    Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Grid>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <Style TargetType="{x:Type DataGrid}">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1BorderBrush}}"/>
                    <Setter Property="BorderThickness" Value="{DynamicResource {x:Static adonisUi:Dimensions.BorderThickness}}" />
                    <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
                    <!-- NOTE; ScrollViewer is a property coming from the MSDN template for DataGrid! -->
                    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
                    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
                    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type DataGrid}">
                                <ScrollViewer x:Name="DG_ScrollViewer"
                                              Style="{StaticResource DataGridScrollViewerStyle}"
                                              Focusable="false">
                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="IsGrouping" Value="True">
                            <!-- TODO; Find out if this actaully targets our scrollviewer property! -->
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </Trigger>
                    </Style.Triggers>
                </Style>

            </Grid.Resources>

            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="{adonisUi:Space 1}"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <Menu>
                <MenuItem Header="File">
                    <MenuItem Header="New">
                        <MenuItem Header="File"
                                  InputGestureText="Ctrl+N"/>
                        <MenuItem Header="Directory"
                                  InputGestureText="Ctrl+Shift+N"/>
                    </MenuItem>
                    <MenuItem Header="Open"/>
                    <MenuItem Header="Save"
                              InputGestureText="Ctrl+S"/>
                    <Separator/>
                    <MenuItem Header="Exit"
                              InputGestureText="Alt+F4">
                        <adonisExtensions:MenuItemExtension.IconTemplate>
                            <DataTemplate>
                                <Viewbox>
                                    <ContentControl ContentTemplate="{DynamicResource {x:Static adonisUi:Icons.Error}}"
                                                    Background="{DynamicResource {x:Static adonisUi:Brushes.ErrorBrush}}"
                                                    Foreground="{DynamicResource {x:Static adonisUi:Brushes.AccentForegroundBrush}}"/>
                                </Viewbox>
                            </DataTemplate>
                        </adonisExtensions:MenuItemExtension.IconTemplate>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="Edit">
                    <MenuItem Header="Copy"
                              InputGestureText="Ctrl+C"/>
                    <MenuItem Header="Paste"
                              InputGestureText="Ctrl+V"/>
                </MenuItem>
                <MenuItem Header="Settings">
                    <MenuItem Header="Option 1"
                              IsChecked="True"/>
                    <MenuItem Header="Option 2"
                              adonisExtensions:MenuItemExtension.IconTemplate="{DynamicResource {x:Static adonisUi:Icons.AdonisUIGrayscale}}"/>
                    <MenuItem Header="Option Group">
                        <MenuItem Header="Option 1"
                                  IsChecked="True"/>
                        <MenuItem Header="Option 2"/>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="Help">
                    <MenuItem Header="About"
                              adonisExtensions:MenuItemExtension.IconTemplate="{DynamicResource {x:Static adonisUi:Icons.AdonisUI}}"/>
                </MenuItem>
            </Menu>

            <TabControl Grid.Row="2">

                <TabItem Header="List Box">
                    <ListBox ItemsSource="{Binding Items}">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Name}"/>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </TabItem>

                <TabItem Header="Grid View">
                    <ListView ItemsSource="{Binding Items}">
                        <ListView.View>
                            <GridView>
                                <GridView.Columns>
                                    <GridViewColumn Header="Name"
                                                    DisplayMemberBinding="{Binding Name}"/>
                                    <GridViewColumn Header="Weight"
                                                    DisplayMemberBinding="{Binding Weight, StringFormat=N2}"/>
                                </GridView.Columns>
                            </GridView>
                        </ListView.View>
                    </ListView>
                </TabItem>

                <TabItem Header="Data Grid" IsSelected="True">
                    <DataGrid ItemsSource="{Binding Items}" AutoGenerateColumns="False" FrozenColumnCount="1">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Name" Binding="{Binding Name}" MinWidth="200"/>
                            <DataGridTextColumn Header="Weight" Binding="{Binding Weight, StringFormat=N2}" MinWidth="500" IsReadOnly="True"/>
                            <DataGridTextColumn Header="Weight" Binding="{Binding Weight, StringFormat=N2}" MinWidth="50"/>
                        </DataGrid.Columns>

                        <DataGrid.RowDetailsTemplate>
                            <DataTemplate>
                                <DockPanel>
                                    <Image DockPanel.Dock="Left" Source="{Binding ImageUrl}" Height="64" Margin="10" />
                                    <Grid Margin="0,10">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>

                                        <TextBlock Text="ID: " FontWeight="Bold" />
                                        <TextBlock Text="IDVALUE" Grid.Column="1" />
                                        <TextBlock Text="Name: " FontWeight="Bold" Grid.Row="1" />
                                        <TextBlock Text="NAMEVALUE" Grid.Column="1" Grid.Row="1" />
                                        <TextBlock Text="Birthday: " FontWeight="Bold" Grid.Row="2" />
                                        <TextBlock Text="BDAYVALUE" Grid.Column="1" Grid.Row="2" />

                                    </Grid>
                                </DockPanel>
                            </DataTemplate>
                        </DataGrid.RowDetailsTemplate>
                    </DataGrid>
                </TabItem>

                <TabItem Header="Tree View">
                    <TreeView ItemsSource="{Binding Items}">
                        <TreeView.ItemTemplate>
                            <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                                <TextBlock Text="{Binding Name}"/>
                            </HierarchicalDataTemplate>
                        </TreeView.ItemTemplate>
                    </TreeView>
                </TabItem>

                <TabItem Header="Tab Control">
                    <TabControl>

                        <TabItem Header="List Box">
                            <ListBox ItemsSource="{Binding Items}">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Name}"/>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </TabItem>

                        <TabItem Header="Grid View">
                            <ListView ItemsSource="{Binding Items}">
                                <ListView.View>
                                    <GridView>
                                        <GridView.Columns>
                                            <GridViewColumn Header="Name"
                                                    DisplayMemberBinding="{Binding Name}"/>
                                            <GridViewColumn Header="Weight"
                                                    DisplayMemberBinding="{Binding Weight, StringFormat=N2}"/>
                                        </GridView.Columns>
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </TabItem>

                        <TabItem Header="Data Grid">
                            <DataGrid ItemsSource="{Binding Items}" AutoGenerateColumns="False">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Name" Binding="{Binding Name}"/>
                                    <DataGridTextColumn Header="Weight" Binding="{Binding Weight, StringFormat=N2}"/>
                                </DataGrid.Columns>
                            </DataGrid>
                        </TabItem>

                        <TabItem Header="Tree View">
                            <TreeView ItemsSource="{Binding Items}">
                                <TreeView.ItemTemplate>
                                    <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                                        <TextBlock Text="{Binding Name}"/>
                                    </HierarchicalDataTemplate>
                                </TreeView.ItemTemplate>
                            </TreeView>
                        </TabItem>

                    </TabControl>
                </TabItem>

            </TabControl>

        </Grid>
    </DataTemplate>

</ResourceDictionary>